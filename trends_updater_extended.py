import pandas as pd
from pytrends.request import TrendReq
import gspread
from gspread_dataframe import set_with_dataframe
from gspread.exceptions import SpreadsheetNotFound
import time

# --- KONFIGUR√ÅCIA ---
# Zadajte kƒæ√∫ƒçov√© slov√°, ktor√© chcete sledova≈•
KEYWORDS = ["online marketing"]

# Mapovanie kraj√≠n na n√°zvy tabov v Google Sheete
# Form√°t: 'N√°zov tabu': 'K√≥d krajiny'
GEO_MAPPING = {
    'Slovensko': 'SK',
    'ƒåesko': 'CZ'
}

# ƒåasov√© obdobie (viac info: https://github.com/GeneralMills/pytrends)
TIMEFRAME = 'today 3-m'  # Posledn√Ωch 90 dn√≠

# Cesta k JSON s√∫boru so Service Account kƒæ√∫ƒçmi
SERVICE_ACCOUNT_FILE = 'service_account.json'

# N√°zov Google Sheet dokumentu, do ktor√©ho sa bud√∫ d√°ta zapisova≈•
GOOGLE_SHEET_NAME = 'Google Trends Monitoring'
# --- KONIEC KONFIGUR√ÅCIE ---


def get_related_data(pytrends, keyword, geo_code):
    """
    Z√≠ska Related Topics a Related Queries pre dan√© kƒæ√∫ƒçov√© slovo.
    """
    try:
        # Vytvorenie po≈æiadavky na Google Trends
        pytrends.build_payload([keyword], cat=0, timeframe=TIMEFRAME, geo=geo_code, gprop='')
        
        # Z√≠skanie Related Topics
        related_topics = pytrends.related_topics()
        
        # Z√≠skanie Related Queries
        related_queries = pytrends.related_queries()
        
        return related_topics, related_queries
    
    except Exception as e:
        print(f"Chyba pri z√≠skavan√≠ related d√°t pre '{keyword}': {e}")
        return None, None


def process_related_topics(related_topics, keyword):
    """
    Spracuje Related Topics data do DataFrame.
    """
    if not related_topics or keyword not in related_topics:
        return pd.DataFrame()
    
    data = related_topics[keyword]
    
    # Rising topics
    rising_df = pd.DataFrame()
    if data['rising'] is not None and not data['rising'].empty:
        rising_df = data['rising'].copy()
        rising_df['Type'] = 'Rising'
        rising_df['Keyword'] = keyword
    
    # Top topics
    top_df = pd.DataFrame()
    if data['top'] is not None and not data['top'].empty:
        top_df = data['top'].copy()
        top_df['Type'] = 'Top'
        top_df['Keyword'] = keyword
    
    # Kombinovanie oboch dataframov
    if not rising_df.empty and not top_df.empty:
        combined_df = pd.concat([top_df, rising_df], ignore_index=True)
    elif not rising_df.empty:
        combined_df = rising_df
    elif not top_df.empty:
        combined_df = top_df
    else:
        combined_df = pd.DataFrame()
    
    return combined_df


def process_related_queries(related_queries, keyword):
    """
    Spracuje Related Queries data do DataFrame.
    """
    if not related_queries or keyword not in related_queries:
        return pd.DataFrame()
    
    data = related_queries[keyword]
    
    # Rising queries
    rising_df = pd.DataFrame()
    if data['rising'] is not None and not data['rising'].empty:
        rising_df = data['rising'].copy()
        rising_df['Type'] = 'Rising'
        rising_df['Keyword'] = keyword
    
    # Top queries
    top_df = pd.DataFrame()
    if data['top'] is not None and not data['top'].empty:
        top_df = data['top'].copy()
        top_df['Type'] = 'Top'
        top_df['Keyword'] = keyword
    
    # Kombinovanie oboch dataframov
    if not rising_df.empty and not top_df.empty:
        combined_df = pd.concat([top_df, rising_df], ignore_index=True)
    elif not rising_df.empty:
        combined_df = rising_df
    elif not top_df.empty:
        combined_df = top_df
    else:
        combined_df = pd.DataFrame()
    
    return combined_df


def update_trends_data():
    """
    Hlavn√° funkcia, ktor√° stiahne d√°ta z Trends a zap√≠≈°e ich do Google Sheets.
    """
    print("Sp√∫≈°≈•am aktualiz√°ciu Google Trends d√°t...")

    # Pripojenie ku Google Sheets
    try:
        gc = gspread.service_account(filename=SERVICE_ACCOUNT_FILE)
        print("Service account authentication successful")

        # Try to open existing spreadsheet
        try:
            spreadsheet = gc.open(GOOGLE_SHEET_NAME)
            print(f"√öspe≈°ne pripojen√Ω k Google Sheetu: '{GOOGLE_SHEET_NAME}'")
        except SpreadsheetNotFound:
            print(f"Google Sheet '{GOOGLE_SHEET_NAME}' nebol n√°jden√Ω.")
            print("Mo≈ænosti:")
            print("1. Vytvorte Google Sheet manu√°lne s n√°zvom '{GOOGLE_SHEET_NAME}'")
            print("2. Zdieƒæajte existuj√∫ci sheet s service account emailom")
            print("3. Alebo upravte n√°zov v konfigur√°cii")
            print()
            print("Service account email z v√°≈°ho JSON s√∫boru:")
            try:
                import json
                with open(SERVICE_ACCOUNT_FILE, 'r') as f:
                    data = json.load(f)
                    print(f"üìß {data['client_email']}")
            except:
                print("üìß (skontrolujte 'client_email' vo va≈°om service_account.json)")
            return

        except Exception as sheet_error:
            if "storage quota" in str(sheet_error).lower():
                print("‚ùå Google Drive storage quota exceeded!")
                print("Rie≈°enia:")
                print("1. Vytvorte Google Sheet manu√°lne")
                print("2. Zdieƒæajte existuj√∫ci sheet s service accountom")
                print("3. Vyƒçistite Google Drive service accountu")
                print()
                print("Service account email:")
                try:
                    import json
                    with open(SERVICE_ACCOUNT_FILE, 'r') as f:
                        data = json.load(f)
                        print(f"üìß {data['client_email']}")
                except:
                    print("üìß (skontrolujte vo va≈°om service_account.json)")
                return
            else:
                print(f"Chyba pri otv√°ran√≠ Google Sheetu: {sheet_error}")
                return

    except FileNotFoundError:
        print(f"S√∫bor {SERVICE_ACCOUNT_FILE} nebol n√°jden√Ω.")
        print("Pros√≠m, vytvorte service_account.json s√∫bor podƒæa n√°vodu v README.md")
        return
    except Exception as e:
        print(f"Chyba pri prip√°jan√≠ ku Google Sheets: {e}")
        print("Mo≈æn√© pr√≠ƒçiny:")
        print("- Neplatn√© service account credentials")
        print("- Probl√©m s internetov√Ωm pripojen√≠m")
        print("- Google API nie je povolen√©")
        return

    # Inicializ√°cia pripojenia ku Google Trends
    pytrends = TrendReq(hl='en-US', tz=360)

    # Prech√°dzanie v≈°etk√Ωch nakonfigurovan√Ωch kraj√≠n
    for sheet_name, geo_code in GEO_MAPPING.items():
        print(f"\nSpracov√°vam krajinu: {sheet_name} ({geo_code})")
        
        # Pre ka≈æd√© kƒæ√∫ƒçov√© slovo
        for keyword in KEYWORDS:
            print(f"  Spracov√°vam kƒæ√∫ƒçov√© slovo: '{keyword}'")
            
            try:
                # 1. Z√≠skanie Interest Over Time
                pytrends.build_payload([keyword], cat=0, timeframe=TIMEFRAME, geo=geo_code, gprop='')
                interest_df = pytrends.interest_over_time()
                
                if not interest_df.empty:
                    # Odstr√°nenie stƒ∫pca 'isPartial'
                    if 'isPartial' in interest_df.columns:
                        interest_df = interest_df.drop(columns=['isPartial'])
                    
                    # Reset indexu
                    interest_df.reset_index(inplace=True)
                    interest_df.rename(columns={'date': 'Date'}, inplace=True)
                    
                    # Z√°pis Interest Over Time
                    tab_name = f"{sheet_name}_{keyword}_Interest"
                    try:
                        worksheet = spreadsheet.worksheet(tab_name)
                        print(f"    Tab '{tab_name}' n√°jden√Ω. ƒåist√≠m star√© d√°ta.")
                    except gspread.WorksheetNotFound:
                        print(f"    Tab '{tab_name}' neexistuje. Vytv√°ram nov√Ω.")
                        worksheet = spreadsheet.add_worksheet(title=tab_name, rows="200", cols="20")
                    
                    worksheet.clear()
                    set_with_dataframe(worksheet, interest_df)
                    print(f"    Interest Over Time d√°ta zap√≠san√© ({len(interest_df)} riadkov)")
                
                # 2. Z√≠skanie Related Topics a Queries
                related_topics, related_queries = get_related_data(pytrends, keyword, geo_code)
                
                # 3. Spracovanie Related Topics
                if related_topics:
                    topics_df = process_related_topics(related_topics, keyword)
                    if not topics_df.empty:
                        tab_name = f"{sheet_name}_{keyword}_Topics"
                        try:
                            worksheet = spreadsheet.worksheet(tab_name)
                            print(f"    Tab '{tab_name}' n√°jden√Ω. ƒåist√≠m star√© d√°ta.")
                        except gspread.WorksheetNotFound:
                            print(f"    Tab '{tab_name}' neexistuje. Vytv√°ram nov√Ω.")
                            worksheet = spreadsheet.add_worksheet(title=tab_name, rows="200", cols="20")
                        
                        worksheet.clear()
                        set_with_dataframe(worksheet, topics_df)
                        print(f"    Related Topics zap√≠san√© ({len(topics_df)} riadkov)")
                
                # 4. Spracovanie Related Queries
                if related_queries:
                    queries_df = process_related_queries(related_queries, keyword)
                    if not queries_df.empty:
                        tab_name = f"{sheet_name}_{keyword}_Queries"
                        try:
                            worksheet = spreadsheet.worksheet(tab_name)
                            print(f"    Tab '{tab_name}' n√°jden√Ω. ƒåist√≠m star√© d√°ta.")
                        except gspread.WorksheetNotFound:
                            print(f"    Tab '{tab_name}' neexistuje. Vytv√°ram nov√Ω.")
                            worksheet = spreadsheet.add_worksheet(title=tab_name, rows="200", cols="20")
                        
                        worksheet.clear()
                        set_with_dataframe(worksheet, queries_df)
                        print(f"    Related Queries zap√≠san√© ({len(queries_df)} riadkov)")

            except Exception as e:
                print(f"    Nastala chyba pri spracovan√≠ '{keyword}': {e}")
            
            # Pauza medzi po≈æiadavkami
            print("    ƒåak√°m 10 sek√∫nd pred ƒèal≈°ou po≈æiadavkou...")
            time.sleep(10)

    print("\nAktualiz√°cia dokonƒçen√°.")


if __name__ == "__main__":
    update_trends_data()
