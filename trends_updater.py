import pandas as pd
from pytrends.request import TrendReq
import gspread
from gspread_dataframe import set_with_dataframe
from gspread.exceptions import SpreadsheetNotFound
import time

# --- KONFIGUR√ÅCIA ---
# Zadajte kƒæ√∫ƒçov√© slov√°, ktor√© chcete sledova≈•
KEYWORDS = ["skincare", "cosrx", "k√≥rejska kozmetika", "Beauty Of Joseon"]

# Mapovanie kraj√≠n na n√°zvy tabov v Google Sheete
# Form√°t: 'N√°zov tabu': 'K√≥d krajiny'
GEO_MAPPING = {
    'Slovensko': 'SK',
    'ƒåesko': 'CZ'
}

# ƒåasov√© obdobie (viac info: https://github.com/GeneralMills/pytrends)
TIMEFRAME = 'today 3-m'  # Posledn√Ωch 90 dn√≠

# Cesta k JSON s√∫boru so Service Account kƒæ√∫ƒçmi
SERVICE_ACCOUNT_FILE = 'service_account.json'

# N√°zov Google Sheet dokumentu, do ktor√©ho sa bud√∫ d√°ta zapisova≈•
GOOGLE_SHEET_NAME = 'Google Trends Monitoring'
# --- KONIEC KONFIGUR√ÅCIE ---


def update_trends_data():
    """
    Hlavn√° funkcia, ktor√° stiahne d√°ta z Trends a zap√≠≈°e ich do Google Sheets.
    """
    print("Sp√∫≈°≈•am aktualiz√°ciu Google Trends d√°t...")

    # Pripojenie ku Google Sheets
    try:
        gc = gspread.service_account(filename=SERVICE_ACCOUNT_FILE)
        print("Service account authentication successful")

        # Try to open existing spreadsheet
        try:
            spreadsheet = gc.open(GOOGLE_SHEET_NAME)
            print(f"√öspe≈°ne pripojen√Ω k Google Sheetu: '{GOOGLE_SHEET_NAME}'")
        except SpreadsheetNotFound:
            print(f"Google Sheet '{GOOGLE_SHEET_NAME}' nebol n√°jden√Ω.")
            print("Mo≈ænosti:")
            print("1. Vytvorte Google Sheet manu√°lne s n√°zvom '{GOOGLE_SHEET_NAME}'")
            print("2. Zdieƒæajte existuj√∫ci sheet s service account emailom")
            print("3. Alebo upravte n√°zov v konfigur√°cii")
            print()
            print("Service account email z v√°≈°ho JSON s√∫boru:")
            try:
                import json
                with open(SERVICE_ACCOUNT_FILE, 'r') as f:
                    data = json.load(f)
                    print(f"üìß {data['client_email']}")
            except:
                print("üìß (skontrolujte 'client_email' vo va≈°om service_account.json)")
            return

        except Exception as sheet_error:
            if "storage quota" in str(sheet_error).lower():
                print("‚ùå Google Drive storage quota exceeded!")
                print("Rie≈°enia:")
                print("1. Vytvorte Google Sheet manu√°lne")
                print("2. Zdieƒæajte existuj√∫ci sheet s service accountom")
                print("3. Vyƒçistite Google Drive service accountu")
                print()
                print("Service account email:")
                try:
                    import json
                    with open(SERVICE_ACCOUNT_FILE, 'r') as f:
                        data = json.load(f)
                        print(f"üìß {data['client_email']}")
                except:
                    print("üìß (skontrolujte vo va≈°om service_account.json)")
                return
            else:
                print(f"Chyba pri otv√°ran√≠ Google Sheetu: {sheet_error}")
                return

    except FileNotFoundError:
        print(f"S√∫bor {SERVICE_ACCOUNT_FILE} nebol n√°jden√Ω.")
        print("Pros√≠m, vytvorte service_account.json s√∫bor podƒæa n√°vodu v README.md")
        return
    except Exception as e:
        print(f"Chyba pri prip√°jan√≠ ku Google Sheets: {e}")
        print("Mo≈æn√© pr√≠ƒçiny:")
        print("- Neplatn√© service account credentials")
        print("- Probl√©m s internetov√Ωm pripojen√≠m")
        print("- Google API nie je povolen√©")
        return

    # Inicializ√°cia pripojenia ku Google Trends
    pytrends = TrendReq(hl='en-US', tz=360)

    # Prech√°dzanie v≈°etk√Ωch nakonfigurovan√Ωch kraj√≠n
    for sheet_name, geo_code in GEO_MAPPING.items():
        print(f"\nSpracov√°vam: {sheet_name} ({geo_code})")
        
        try:
            # Vytvorenie po≈æiadavky na Google Trends
            pytrends.build_payload(KEYWORDS, cat=0, timeframe=TIMEFRAME, geo=geo_code, gprop='')
            
            # Z√≠skanie d√°t "Interest Over Time"
            df = pytrends.interest_over_time()

            if df.empty:
                print(f"Pre {sheet_name} neboli vr√°ten√© ≈æiadne d√°ta. Preskakujem.")
                continue

            # Odstr√°nenie stƒ∫pca 'isPartial', ktor√Ω indikuje nekompletn√© d√°ta
            if 'isPartial' in df.columns:
                df = df.drop(columns=['isPartial'])
            
            # Reset indexu, aby sa d√°tum stal be≈æn√Ωm stƒ∫pcom
            df.reset_index(inplace=True)
            # Premenovanie stƒ∫pca 'date' na 'Date' pre kraj≈°√≠ vzhƒæad
            df.rename(columns={'date': 'Date'}, inplace=True)

            print(f"D√°ta √∫spe≈°ne stiahnut√©. Poƒçet riadkov: {len(df)}")

            # Pripojenie ku konkr√©tnemu tabu (worksheetu)
            try:
                worksheet = spreadsheet.worksheet(sheet_name)
                print(f"Tab '{sheet_name}' n√°jden√Ω. ƒåist√≠m star√© d√°ta.")
            except gspread.WorksheetNotFound:
                print(f"Tab '{sheet_name}' neexistuje. Vytv√°ram nov√Ω.")
                worksheet = spreadsheet.add_worksheet(title=sheet_name, rows="100", cols="20")
            
            worksheet.clear()
            
            # Z√°pis d√°t (DataFrame) do tabu
            set_with_dataframe(worksheet, df)
            
            print(f"D√°ta pre '{sheet_name}' boli √∫spe≈°ne zap√≠san√©.")

        except Exception as e:
            # Vyp√≠sanie chybovej hl√°≈°ky, ak nieƒço zlyh√° (napr. rate limiting)
            print(f"Nastala chyba pri spracovan√≠ '{sheet_name}': {e}")
        
        # Slu≈°n√° pauza medzi po≈æiadavkami, aby sme predi≈°li rate limitingu
        print("ƒåak√°m 10 sek√∫nd pred ƒèal≈°ou po≈æiadavkou...")
        time.sleep(10)

    print("\nAktualiz√°cia dokonƒçen√°.")


if __name__ == "__main__":
    update_trends_data()
